if getgenv().Loaded ~= true then
getgenv().Loaded = true

repeat task.wait()
task.spawn(function()
local args = {
    [1] = { ["config"] = "start_screen" }
}
game:GetService("Players").LocalPlayer:WaitForChild("ClientNetwork").MenuOptions:FireServer(unpack(args))

local args = {
    [1] = { ["slot"] = "Slot_1", ["config"] = "slots" }
}
game:GetService("Players").LocalPlayer.ClientNetwork.MenuOptions:FireServer(unpack(args))
end)
until game.Players.LocalPlayer.Character

repeat task.wait() until game.Players.LocalPlayer.Character:FindFirstChild("CharacterHandler") and game.Players.LocalPlayer.Character:FindFirstChild("BoolValues")

task.wait(3.5)

local Network = require(game:GetService("ReplicatedStorage").Modules.Network)
Original = Network.connect
            Network.connect = function(RemoteName, Method, Character, Settings, ...)
                if Settings and typeof(Settings) == "table" and Settings.Config == "FallDamage" then
                    return
                end

                return Original(RemoteName, Method, Character, Settings, ...)
            end

local farm = {
    "Beehive",
    "Honey",
    "Pineroot",
    "Falthorn",
    "Lumishroom",
    "Moss",
    "Pineroot",
    "Vitalshroom"
}

local amount = 0

function check()
amount = 0
for i,v in pairs(workspace.Harvestable:GetChildren()) do
     if table.find(farm,v.Name) then
         amount += 1
         end
    end
return amount;
end

function serverhop()


    local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request 
    if httprequest then
        local servers = {}
        local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=50&excludeFullGames=true", game.PlaceId)})
        local body = game:GetService("HttpService"):JSONDecode(req.Body)

        if body and body.data then
            for i, v in next, body.data do
                if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId  then
                    table.insert(servers, 1, v.id)
                end
            end
        end

        if #servers > 0 then
            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], game.Players.LocalPlayer)

        end

    end

end

task.spawn(function()
task.wait(60)
serverhop()
end)

for i,v in pairs(workspace.Harvestable:GetChildren()) do
if not table.find(farm,v.Name) then
v:Destroy()
   end
end

function tp(parte,class)
local type;
if class == "Model" then
type = parte.Parent
else
type = parte
end
local A_1 = 
{
    ["player"] = game:GetService("Players"):GetChildren().LocalPlayer, 
    ["Object"] = game:GetService("Workspace").InvisibleParts.ColosseumExit, 
    ["Action"] = "Enter"
}
local Event = game:GetService("Players").LocalPlayer.Character.CharacterHandler.Input.Events.Interact
Event:FireServer(A_1)
task.wait((game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue() * 0.001) + 0.1)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = parte.CFrame
end

task.spawn(function()
while task.wait(0.1) do

for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
if table.find(farm,v.Name) then

task.spawn(function() 
local A_1 = game.Players.LocalPlayer.Backpack[v.Name]
local A_3 = true
local Event = game.Players.LocalPlayer.Character.CharacterHandler.Input.Events.SellEvent
Event:FireServer(A_1, A_3)
end)

    end
end

    end
end)

task.spawn(function()
while true do task.wait()

if check() <= 3 then
	serverhop()
end

task.spawn(function()
if game.Players.LocalPlayer.Character.BoolValues.CombatTag.Value ~= 0 then
task.wait(2.5)
if game.Players.LocalPlayer.Character.BoolValues.CombatTag.Value ~= 0 then
serverhop()
end
end
end)

game:GetService('VirtualInputManager'):SendKeyEvent(true, "E", false, game)
game:GetService('VirtualInputManager'):SendKeyEvent(false, "E", false, game)
end
end)

while task.wait() do

for i,v in pairs(workspace.Harvestable:GetChildren()) do
if table.find(farm,v.Name) then


if v:IsA("Model") then
workspace.CurrentCamera.CFrame = v.PrimaryPart.CFrame
tp(v.PrimaryPart,"Model")
else
workspace.CurrentCamera.CFrame = v.CFrame
tp(v,"Part")
end

    end
end


end


end
